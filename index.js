'use strict';

// Написати функцію суми двох аргументів
function sum(a, b) {
  // Function Declaration
  return a + b;
}

const sumArrow = (a, b) => {
  //1 Arrow Function
  return a + b; //1 функція складається тільки з одного-єдиного return
};

const sumArrowVariant2 = (a, b) => a + b; // a + b === { return a + b }

// Задача: Написати функцію, яка приймає число і зводить його у квадрат

const pow = number ** 2; // якщо аргумент 1, то круглі дужки можна опустити
//АЛЕ ! Якщо ваша функція не приймає аргументів взагалі - круглі дужки (пусті) обовʼязкові

const SuperFunc = () => {
  // this вказує на глобальну область видимості
  this.value = 'hello'; // нам потрібно, щоб функція-констуктор вказувала на свій власний контекст виконання
}; //функція-констуктор не може бути стрілочною

//arguments - псевдомасив з аргументами, які ми передаємо нашій функції при виклику

const t1 = function () {// function expression
  console.log(arguments);
};

const t2 = ()=> {// стрілочні функції не мають arguments
  console.log(arguments);
};

t2('hello', 'world', '!!!!');

/*

1. Стрілочна функція не має свого власного контексту виконання (вона буде брати найближчий доступний)
2. Стрілочна функція не може бути функцією-конструктором
3. Стрілочна функція не має колекції arguments
*/
